#!/usr/bin/env python3
#
# Copyright (C) 2016 Canonical, Ltd.
# Author: Scott Sweeny <scott.sweeny@canonical.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import argparse
import contextlib
import importlib
import pkgutil
import os
import sys

def _snap_path(path):
    if os.path.exists(path):
        # a valid snap directory should contain meta/snap.yaml
        if os.path.exists(os.path.join(path, 'meta', 'snap.yaml')):
            return path
        else:
            print("%s is not a valid snap directory" % path)
            return None
    else:
        print("%s does not exist" % path)
        return None

def _parse_args():
    parser = argparse.ArgumentParser(description='Clean up your snap')

    parser.add_argument('snap',
                        help='snap directory to test')

    parser.add_argument('-i', '--include', nargs='+', metavar='rule',
                        help='Run only these rules (default is all rules)')

    args = parser.parse_args()
    return args

def _get_scanner(module):
    for attr in vars(module).values():
        if not isinstance(attr, type):
            continue
        if not issubclass(attr, snaplint.Rule):
            continue
        if attr == snaplint.Rule:
            continue
        return attr

topdir = os.path.abspath(os.path.join(__file__, '..', '..'))
if os.path.exists(os.path.join(topdir, 'setup.py')):
    # Run from checkout
    sys.path = [topdir] + sys.path

if __name__ == '__main__':

    args = _parse_args()
    snap = _snap_path(args.snap)
    if snap == None:
        print("Please specify a valid snap directory")
        sys.exit(1)
        
    # This logic stolen shamelessly from snapcraft
    import snaplint
    import snaplint.rules
    rules_to_run = []
    for importer, modname, is_package in pkgutil.iter_modules(snaplint.rules.__path__):
        rules_to_run.append(modname)
        
    print('Rules to run: ', rules_to_run)

    print("Running scan!")
    fail = False
    for rule in rules_to_run:
        module = None

        with contextlib.suppress(ImportError):
            module = importlib.import_module('snaplint.rules.{}'.format(rule))
        if not module:
            print("Cannot find rule {}".format(rule))
            sys.exit(1)
        scanner = _get_scanner(module)
        if not scanner:
            print("Invalid rule: {}".format(rule))
            sys.exit(1)

        scanner_inst = scanner(snap)
        if not scanner_inst.scan():
            fail = True

    if fail:
        sys.exit(1)
    else:
        sys.exit(0)

        
